install.package("swirl")
source('~/.active-rstudio-document')
install.packages("swirl")
install.packages("shiny")
mean(x,p)
p<-c(.1,.2,.3,.4)
x<-2:5
mean(x,p)
info.mean
?mean
weighted.mean(x,p)
?variance
?var
?var.wt
?sum
sum((x-4)^2 * p)
0.75 / 1.23
x <- 1:4
p <- x/sum(x)
weighted.mean(x,p)
0.75 * 0.3 / (0.3 * 0.75 + 0.48 * 0.7)
library(shiny)
runApp("~/R/x86_64-pc-linux-gnu-library/3.1/shiny/examples/01_hello")
shiny::runApp('Onlinekurse/DevelopingDataProducts/09_DevelopingDataProducts/shiny/inputApp')
shiny::runApp('Onlinekurse/DevelopingDataProducts/09_DevelopingDataProducts/shiny/inputApp')
shiny::runApp('Onlinekurse/DevelopingDataProducts/09_DevelopingDataProducts/shiny/graphApp')
install.packages("UsingR")
shiny::runApp('Onlinekurse/DevelopingDataProducts/09_DevelopingDataProducts/shiny/graphApp')
shiny::runApp('Onlinekurse/DevelopingDataProducts/09_DevelopingDataProducts/shiny/testApp')
library(manipulate)
manipulate(plot(1:x), x = slider(1,
100))
manipulate(plot(1:x), x = slider(1, 100))
require(rCharts)
install.packages("rCharts")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
library(base64enc)
install_github("ramnathv/rCharts@dev")
require(rCharts)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
1100 + 1.645 * 75
ppois(10, lambda = 15)
?sum
cases <- for(i in 0:10){i}
cases
?vector
cases <- 0:10
cases
casesprobs <- 15^cases * exp(-15) / factorial(cases)
casesprobs
factorial(cases)
sum(casesprobs)
1100 + 1.645 * 75 / 10
?pbinom
dbinom(4, 5, 0.5)
pbinom(4, 5, 0.5)
dbinom(5, 5, 0.5)
dbinom(5, 5, 0.5) + dbinom(4,5,0.5)
1 - pbinom(3,5,0.5)
choose(4,5)*0.5^5
choose(5,4)*0.5^5
library(caret)
library(AppliedPredictiveModeling)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
training
?createDataPartition
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
head(test)
head(testing)
trainIndex = createDataPartition(diagnosis, p = 0.50) training = adData[trainIndex,]
> testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
plot(training)
plot(training$CompressiveStrength)
qplot(training$CompressiveStrength, training$Age)
qplot(training$CompressiveStrength, training$FlyAsh)
library("Hmisc")
?cut2
age <- cut2(training$Age, c(7,14,21,28))
plot(training$CompressiveStrength, color=age)
plot(training$CompressiveStrength, colour=age)
plot(training$Age)
warnings()
plot(training$FlyAsh)
summary(concrete)
plot(training$BlastFurnaceSlag)
plot(training$Water)
plot(training$Superplasticizer)
plot(training$CoarseAggregate)
plot(training$FineAggregate)
qplot(CompressiveStrength, Age, data=training)
qplot(CompressiveStrength, FlyAsh, data=training)
qplot(CompressiveStrength, index, data=training)
qplot(CompressiveStrength, data=training)
?qplot
qplot(CompressiveStrength, 1:length(CompressiveStrength), data=training)
qplot(1:length(CompressiveStrength),CompressiveStrength, data=training)
qplot(1:length(CompressiveStrength),CompressiveStrength, data=training,colour=age)
age
?cut2
age <- cut2(training$Age, c(7,14,21))
qplot(1:length(CompressiveStrength),CompressiveStrength, data=training,colour=age)
table(age)
age <- cut2(training$Age, c(7,14,21,28, 35))
qplot(1:length(CompressiveStrength),CompressiveStrength, data=training,colour=age)
qplot(1:length(CompressiveStrength),Age, data=training,colour=age)
seq(1:38:2)
?seq
seq(1,38,2)
age <- cut2(training$Age, seq(0,28,7))
qplot(1:length(CompressiveStrength),Age, data=training,colour=age)
age <- cut2(training$Age, seq(0,300,50))
qplot(1:length(CompressiveStrength),Age, data=training,colour=age)
qplot(1:length(CompressiveStrength),CompressiveStrength, data=training,colour=age)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$SuperPlasticizer)
qplot(SuperPlasticizer, data=training)
summary(concrete)
qplot(Superplasticizer, data=training)
?log
qplot(log10(Superplasticizer), data=training)
log10(0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(adData)
summary(adData$IL)
summary(adData$age)
summary(adData$IL*)
?colnames
colnames(adData)
?match
grep("IL",colnames(adData))
ilcols<-grep("IL",colnames(adData))
ilfeatures<-adData[,ilcols]
head(ilfeatures)
?preProcess
preProcess(ilfeatures, method="pca",thresh=0.9)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
ilcols<-grep("IL",colnames(training))
ilcols
ilfeatures<-training[,ilcols]
preProcess(ilfeatures, method="pca",thresh=0.9)
preProcess(ilfeatures, method="pca",thresh=0.95)
preProcess(ilfeatures, method="pca",thresh=0.85)
preProcess(ilfeatures, method="pca",thresh=0.89)
summary(ilfeatures)
head(ilfeatures)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ilcols[1:length(ilcols)-1]
ilcols<-ilcols[1:length(ilcols)-1]
ilfeatures<-training[,ilcols]
preProcess(ilfeatures, method="pca",thresh=0.9)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
qplot(IL_6,diagnosis, data=training)
reducedtrainingdata <- traing[,c(1,ilcols)]
reducedtrainingdata <- training[,c(1,ilcols)]
head(reducedtrainingdata)
modFit <- train(diagnosis ~ sum(colnames(reducedtrainingdata)[-1]))
modFit <- train(diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8, method = "lm", data = training)
?factor
diag <- reducedtrainingdata[,1]
diag
diag <- if(diag == "Impaired")
q
diag
diag <- reducedtrainingdata[,1]
diag <- (diag == "Impaired")
diag
reducedtrainingdata[,1] <- diag
modFit <- train(diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8, method = "lm", data = training)
modFit <- train(diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8, method = "lm", data = reducedtrainingdata)
modFit <- train(diagnosis ~ ., method = "lm", data = reducedtrainingdata)
reducedtrainingdata$diagnosis
$int
?int
modFit <- train(diagnosis ~ ., method = "glm", data = reducedtrainingdata)
?train
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFit <- train(diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8, method = "glm", data = training)
modFit <- train(diagnosis ~ ., method = "glm", data = training)
modFit <- train(IL_11 ~ + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8, method = "glm", data = training)
for(i in seq(length(training$diagnosis)))
if(training$diagnosis[i] == "Impaired")
training$diagnosis[i] <- 1
warnings()
for(i in seq(length(training$diagnosis))){}
for(i in seq(length(training$diagnosis))){if(training$diagnosis[i] == "Impaired"){training$diagnosis[i] <- 1}else{training$diagnosis[i] <- 0}}
training$diagnosis[1]
(training$diagnosis)[1]
training$diagnosis
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training$diagnosis
training$diagnosis[1]
training$diagnosis[1] <- "Control"
training$diagnosis[1]
training$diagnosis[1] <- "Impaired"
for(i in seq(length(training$diagnosis))){if(training$diagnosis[i] == "Impaired"){training$diagnosis[i] <- 1}else{training$diagnosis[i] <- 0}}
warnings()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training$diagnosis
training$diagnosis[69]
training$diagnosis[70]
?dummyVars
library(kernlab)
install.packages("kernlab")
?data
data()
data()
source('~/Onlinekurse/PracticalMachineLearning/CourseProject/exercisepreiction.r')
source('~/Onlinekurse/PracticalMachineLearning/CourseProject/exercisepreiction.r')
data
head(data)
summary(data)
summary(data$classe)
ncolumns(data)
dim(data)
?dim
ncol(data)
qplot(data$magnet_forarm_x)
?createDataPartition
inTrain <- createDataPartition(data$classe, p = 0.5, list = FALSE)
inTrain
source('~/Onlinekurse/PracticalMachineLearning/CourseProject/exercisepreiction.r')
summary(training)
dim(training)
dim(testing)
?set.seed
source('~/Onlinekurse/PracticalMachineLearning/CourseProject/exercisepreiction.r')
dim(testing)
dim(training)
training$classe
plot(training$classe)
colnames(training)
plot(training$accel_forearm_z)
qplot(accel_forearm_z, classe, data=training)
featurePlot(x=training[,c("gyros_forearm_x","accel_forearm_z","magnet_forearm_y")],y=training$classe,plot="pairs")
qplot(accel_forearm_z, classe, data=training)
qplot(accel_forearm_x, classe, data=training)
qplot(kurtosis_roll_forearm, classe, data=training)
plot(training$kurtosis_roll_forearm)
plot(training$roll_forearm)
qplot(roll_forearm, classe, data=training)
training?roll_forearm
training$roll_forearm
featurePlot(x=training[,c("roll_forearm")],y=training$classe,plot="pairs")
featurePlot(x=training[,c("roll_forearm","roll_arm")],y=training$classe,plot="pairs")
featurePlot(x=training[,c("roll_forearm","roll_arm", "pitch_belt")],y=training$classe,plot="pairs")
"magnet_forearm_y"
featurePlot(x=training[,c("gyros_forearm_x","accel_forearm_z","magnet_forearm_y")],y=training$classe,plot="pairs")
featurePlot(x=training[,c("roll_forearm","roll_arm", "pitch_belt")],y=training$classe,plot="pairs")
colnames(training)
featurePlot(x=training[,c("pitch_arm","roll_arm", "yaw_arm")],y=training$classe,plot="pairs")
featurePlot(x=training[,c("pitch_arm","roll_arm", "yaw_arm", "total_accel_arm")],y=training$classe,plot="pairs")
summary(training$max_roll_forearm)
summary(training$roll_forearm)
summary(training$total_accel_forearm)
summary(training$amplitude_roll_forearm)
summary(training$avg_roll_forearm)
summary(training$kurtosis_roll_forearm)
summary(training$var_accel_forearm)
colnames(training)
featurePlot(x=training[,c("pitch_belt","roll_belt", "yaw_belt", "total_accel_belt")],y=training$classe,plot="pairs")
featurePlot(x=training[,c("pitch_dumbbell","roll_dumbbell", "yaw_dumbbell", "total_accel_dumbbell")],y=training$classe,plot="pairs")
featurePlot(x=training[,c("pitch_forearm","roll_forearm", "yaw_forearm", "total_accel_forearm")],y=training$classe,plot="pairs")
cut_roll_arm <- cut2(training$roll_armm, g=3)
library(Hmisc)
cut_roll_arm <- cut2(training$roll_armm, g=3)
cut_roll_arm <- cut2(training$roll_arm, g=3)
qplot(roll_arm,colour=classe,data=training,geom="density")
qplot(pitch_arm,colour=classe,data=training,geom="density")
qplot(yaw_arm,colour=classe,data=training,geom="density")
qplot(total_accel_arm,colour=classe,data=training,geom="density")
qplot(total_accel_belt,colour=classe,data=training,geom="density")
qplot(pitch_belt,colour=classe,data=training,geom="density")
qplot(roll_arm,colour=classe,data=training,geom="density")
qplot(pitch_arm,colour=classe,data=training,geom="density")
qplot(yaw_arm,colour=classe,data=training,geom="density")
qplot(total_accel_arm,colour=classe,data=training,geom="density")
qplot(accel_arm_x,colour=classe,data=training,geom="density")
qplot(accel_arm_y,colour=classe,data=training,geom="density")
qplot(accel_arm_z,colour=classe,data=training,geom="density")
qplot(gyros_arm_z,colour=classe,data=training,geom="density")
qplot(gyros_arm_x,colour=classe,data=training,geom="density")
qplot(gyros_arm_y,colour=classe,data=training,geom="density")
qplot(roll_belt,colour=classe,data=training,geom="density")
qplot(pitch_belt,colour=classe,data=training,geom="density")
qplot(yaw_belt,colour=classe,data=training,geom="density")
qplot(total_accel_belt,colour=classe,data=training,geom="density")
qplot(accel_belt_x,colour=classe,data=training,geom="density")
qplot(accel_belt_y,colour=classe,data=training,geom="density")
qplot(accel_belt_z,colour=classe,data=training,geom="density")
qplot(magnet_belt_z,colour=classe,data=training,geom="density")
qplot(magnet_belt_x,colour=classe,data=training,geom="density")
qplot(magnet_belt_y,colour=classe,data=training,geom="density")
qplot(gyros_belt_y,colour=classe,data=training,geom="density")
qplot(gyros_belt_x,colour=classe,data=training,geom="density")
qplot(gyros_belt_z,colour=classe,data=training,geom="density")
qplot(roll_dumbbell,colour=classe,data=training,geom="density")
qplot(pitch_dumbbell,colour=classe,data=training,geom="density")
qplot(yaw_dumbbell,colour=classe,data=training,geom="density")
qplot(total_accel_dumbbell,colour=classe,data=training,geom="density")
qplot(roll_forearm,colour=classe,data=training,geom="density")
qplot(pitch_forearm,colour=classe,data=training,geom="density")
qplot(yaw_forearm,colour=classe,data=training,geom="density")
qplot(total_accel_forearm,colour=classe,data=training,geom="density")
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
source('~/Onlinekurse/Rprogramming/assignment2/ProgrammingAssignment2/cachematrix.R')
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getInv(),solve(x)))
x <- matrix(rnorm(160000),400,400)
x_ <- makeCacheMatrix(x)
cacheSolve(x_)
print(identical(x_$getinverse(),solve(x)))
shiny::runApp('Onlinekurse/DevelopingDataProducts/CourseProjectDDP')
shiny::runApp('Onlinekurse/DevelopingDataProducts/CourseProjectDDP')
alldata <- read.table('particle_pos_ori_seed5_pe5_a0.1_r00_dt0.1_L60_N5000spdrift.dat')
get.wd()
get_wd()
getwd()
setwd("Onlinekurse//DevelopingDataProducts/CourseProjectDDP/")
alldata <- read.table('particle_pos_ori_seed5_pe5_a0.1_r00_dt0.1_L60_N5000spdrift.dat')
xlow <- 10
xhigh <- 12
??and
?xor
shiny::runApp()
getdataslice <- function(alldata, xlow, xhigh){
zpos <- alldata$V3
zori <- alldata$V6
zorislice <- numeric(length=0)
for(i in seq(1:length(zpos))){
if(zpos[i] <= xhigh && zpos[i] > xlow){
zorislice <- c(zorislice, zori[i])
}
}
zorislice
}
getdataslice(alldata,xlow,xhigh)
slice <- getdataslice(alldata,xlow,xhigh)
hist(slice, xlab='Particle orientation (z component)', col='blue',main='Orientation distribution')
slice <- getdataslice(alldata,55,60)
hist(slice, xlab='Particle orientation (z component)', col='blue',main='Orientation distribution')
slice <- getdataslice(alldata,0,1)
hist(slice, xlab='Particle orientation (z component)', col='blue',main='Orientation distribution')
slice <- getdataslice(alldata,30,40)
hist(slice, xlab='Particle orientation (z component)', col='blue',main='Orientation distribution')
slice <- getdataslice(alldata,30,31)
hist(slice, xlab='Particle orientation (z component)', col='blue',main='Orientation distribution')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?bin
?hist
runApp()
runApp(displayMode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
shiny::runApp()
runApp(display.mode='showcase')
alldata <- read.table('particle_pos_ori_seed5_pe5_a0.1_r00_dt0.1_L60_N5000spdrift.dat')
zpos <- alldata$V3
zpos <- zpos[length(zpos)-1000:length(zpos)]
zori <- alldata$V6
zori <- zori[length(zori)-1000:length(zori)]
hist(zori, xlab='Particle orientation (z component)', col='blue',main='Orientation distribution')
length(zori)
zori[1:2]
zori[length(zori)-10:length(zori)]
len <- length(zori)
zori[len-10:len]
len
zori[498000:499000]
len-1000
zori[(len-1000):len]
zori[len-1000:len]
zori[(length(zori)-10):length(zori)]
runApp(display.mode='showcase')
runApp(display.mode='showcase')
len
runApp(display.mode='showcase')
runApp(display.mode='showcase')
shiny::runApp()
shiny::runApp()
